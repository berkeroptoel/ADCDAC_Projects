-- -------------------------------------------------------------
--
-- Module: cic15
-- Generated by MATLAB(R) 9.4 and Filter Design HDL Coder 3.1.3.
-- Generated on: 2021-03-12 18:13:57
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- Name: cic15
-- ResetAssertedLevel: Active-low
-- TestBenchStimulus: step ramp chirp noise 
-- GenerateHDLTestBench: off

-- -------------------------------------------------------------
-- HDL Implementation    : Fully parallel
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Multirate Filter (real)
-- -----------------------------------------
-- Filter Structure        : Cascaded Integrator-Comb Decimator
-- Decimation Factor       : 10
-- Differential Delay      : 1
-- Number of Sections      : 1
-- Stable                  : Yes
-- Linear Phase            : Yes (Type 2)
--
-- Input                   : s13,0
-- Output                  : s17,0
-- Filter Internals        : Full Precision
--   Integrator Section 1  : s17,0
--   Comb Section 1        : s17,0
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY cic15 IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(12 DOWNTO 0); -- sfix13
         filter_out                      :   OUT   std_logic_vector(16 DOWNTO 0); -- sfix17
         ce_out                          :   OUT   std_logic  
         );

END cic15;


----------------------------------------------------------------
--Module Architecture: cic15
----------------------------------------------------------------
ARCHITECTURE rtl OF cic15 IS
  -- Local Functions
  -- Type Definitions
  -- Constants
  -- Signals
  SIGNAL cur_count                        : unsigned(3 DOWNTO 0); -- ufix4
  SIGNAL phase_1                          : std_logic; -- boolean
  SIGNAL ce_out_reg                       : std_logic; -- boolean
  --   
  SIGNAL input_register                   : signed(12 DOWNTO 0); -- sfix13
  --   -- Section 1 Signals 
  SIGNAL section_in1                      : signed(12 DOWNTO 0); -- sfix13
  SIGNAL section_cast1                    : signed(16 DOWNTO 0); -- sfix17
  SIGNAL sum1                             : signed(16 DOWNTO 0); -- sfix17
  SIGNAL section_out1                     : signed(16 DOWNTO 0); -- sfix17
  SIGNAL add_cast                         : signed(16 DOWNTO 0); -- sfix17
  SIGNAL add_cast_1                       : signed(16 DOWNTO 0); -- sfix17
  SIGNAL add_temp                         : signed(17 DOWNTO 0); -- sfix18
  --   -- Section 2 Signals 
  SIGNAL section_in2                      : signed(16 DOWNTO 0); -- sfix17
  SIGNAL diff1                            : signed(16 DOWNTO 0); -- sfix17
  SIGNAL section_out2                     : signed(16 DOWNTO 0); -- sfix17
  SIGNAL sub_cast                         : signed(16 DOWNTO 0); -- sfix17
  SIGNAL sub_cast_1                       : signed(16 DOWNTO 0); -- sfix17
  SIGNAL sub_temp                         : signed(17 DOWNTO 0); -- sfix18
  --   
  SIGNAL output_register                  : signed(16 DOWNTO 0); -- sfix17


BEGIN

  -- Block Statements
  --   ------------------ CE Output Generation ------------------

  ce_output : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      cur_count <= to_unsigned(0, 4);
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        IF cur_count >= to_unsigned(9, 4) THEN
          cur_count <= to_unsigned(0, 4);
        ELSE
          cur_count <= cur_count + to_unsigned(1, 4);
        END IF;
      END IF;
    END IF; 
  END PROCESS ce_output;

  phase_1 <= '1' WHEN cur_count = to_unsigned(1, 4) AND clk_enable = '1' ELSE '0';

  --   ------------------ CE Output Register ------------------

  ce_output_register : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      ce_out_reg <= '0';
    ELSIF clk'event AND clk = '1' THEN
      ce_out_reg <= phase_1;
      
    END IF; 
  END PROCESS ce_output_register;

  --   ------------------ Input Register ------------------

  input_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      input_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        input_register <= signed(filter_in);
      END IF;
    END IF; 
  END PROCESS input_reg_process;

  --   ------------------ Section # 1 : Integrator ------------------

  section_in1 <= input_register;

  section_cast1 <= resize(section_in1, 17);

  add_cast <= section_cast1;
  add_cast_1 <= section_out1;
  add_temp <= resize(add_cast, 18) + resize(add_cast_1, 18);
  sum1 <= add_temp(16 DOWNTO 0);

  integrator_delay_section1 : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      section_out1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        section_out1 <= sum1;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section1;

  --   ------------------ Section # 2 : Comb ------------------

  section_in2 <= section_out1;

  sub_cast <= section_in2;
  sub_cast_1 <= diff1;
  sub_temp <= resize(sub_cast, 18) - resize(sub_cast_1, 18);
  section_out2 <= sub_temp(16 DOWNTO 0);

  comb_delay_section2 : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      diff1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_1 = '1' THEN
        diff1 <= section_in2;
      END IF;
    END IF; 
  END PROCESS comb_delay_section2;

  --   ------------------ Output Register ------------------

  output_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '0' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_1 = '1' THEN
        output_register <= section_out2;
      END IF;
    END IF; 
  END PROCESS output_reg_process;

  -- Assignment Statements
  ce_out <= ce_out_reg;
  filter_out <= std_logic_vector(output_register);
END rtl;
